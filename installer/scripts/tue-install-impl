#!/bin/bash

if [ -z "$TUE_ROS_DISTRO" ]
then
    echo "[tue-install] TUE_ROS_DISTRO was not set."
    return
fi

TUE_SYSTEM_DIR=~/ros/$TUE_ROS_DISTRO/system
TUE_REPOS_DIR=~/ros/$TUE_ROS_DISTRO/repos

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

function randid {
    </dev/urandom tr -dc '0123456789abcdef' | head -c16; echo ""
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

function tue-install-error {
    echo "
Error while installing target '$TUE_INSTALL_CURRENT_TARGET':

    $1
"
    exit 1
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

function tue-install-target {
    local target=$1

    #echo $target

    if [ ! -f $TUE_INSTALL_STATE_DIR/$target ]; then
        install_file=$TUE_INSTALL_TARGET_DIR/$target/install

        local parent_target=$TUE_INSTALL_CURRENT_TARGET

        TUE_INSTALL_CURRENT_TARGET_DIR=$TUE_INSTALL_TARGET_DIR/$target
        TUE_INSTALL_CURRENT_TARGET=$target

        # If the target has a parent target, add target as a dependency to the parent target
        if [ -n "$parent_target" ]
        then
            mkdir -p ~/.tue/dependencies
            echo "$target" >> ~/.tue/dependencies/$parent_target
        fi

        # Empty the target's dependency file        
        > ~/.tue/dependencies/$target

        if [ -f $install_file.bash ]
        then
            source $install_file.bash
        elif [ -f $install_file.yaml ]
        then
            local cmds=`~/.tue/installer/scripts/parse-install-yaml $install_file.yaml`
            if [ $? -eq 0 ]; then
                for cmd in $cmds
                do
                    ${cmd//^/ }
                done
            else
                tue-install-error "Invalid install.yaml: $cmd"
            fi 
        else
            tue-install-error "No install file (bash or yaml) for target '$target'."
        fi

        TUE_INSTALL_CURRENT_TARGET=$parent_target
        TUE_INSTALL_CURRENT_TARGET_DIR=$TUE_INSTALL_TARGET_DIR/$parent_target

        touch $TUE_INSTALL_STATE_DIR/$target
    fi
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

function tue-install-sys {
    source=$1
    TUE_INSTALL_SYSTEMS="$source $TUE_INSTALL_SYSTEMS"
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

function tue-install-svn {   
    if [ -n "$TUE_INSTALL_DUMMY" ]; then
        echo "svn co $1 $2"
        cp -rf ~/fake-svn/$1 $2       
        return
    fi
   
    if [ ! -d $2 ]; then 
        svn co $1 $2
    else
        echo "$2: "
        svn up $2
    fi
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

function tue-install-git {
    if [ -n "$TUE_INSTALL_DUMMY" ]; then
        echo "git clone $1 $2 ($3)"
        return
    fi

    local version=$3
    if [ -n "$version" ]; then
        if [ ! -d $2 ]; then 
            git clone $1 $2
            mem_pwd=$PWD
            cd $2
            git checkout $version
            cd $mem_pwd                    
        fi
    else
        if [ ! -d $2 ]; then 
            git clone $1 $2
        else
            mem_pwd=$PWD
            cd $2
            git pull
            cd $mem_pwd
        fi
    fi    
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

function tue-install-apply-patch
{
    if [ -z "$1" ]
    then
        tue-install-error "Invalid tue-install-apply-patch call: needs patch file as argument."
    fi

    if [ -z "$TUE_INSTALL_PKG_DIR" ]
    then
        tue-install-error "Invalid tue-install-apply-patch call: package directory is unknown."        
    fi

    patch_file=$TUE_INSTALL_CURRENT_TARGET_DIR/$1

    if [ ! -f $patch_file ]
    then
        tue-install-error "Invalid tue-install-apply-patch call: patch file '$1' does not exist."  
    fi
    
    patch -s -N -r - -p0 -d $TUE_INSTALL_PKG_DIR < $patch_file
}


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

function tue-install-ros-rosbuild
{
    if [[ $TUE_ROS_DISTRO != "groovy" ]]
    then
        tue-install-error "Trying to install a rosbuild package, but TUE_ROS_DISTRO is set to '$TUE_ROS_DISTRO'."
    fi

    type=$1
    source=$2
    sub_dir=$3
    version=$4

    local ros_pkg_name=${TUE_INSTALL_CURRENT_TARGET#ros-}

    # First of all, make sure ROS itself is installed
    tue-install-target ros    

    local ros_pkg_dir=$ROSBUILD_PACKAGE_INSTALL_DIR/$ros_pkg_name
    local repos_dir=$TUE_REPOS_DIR/$source

    if [ "$type" = "git" ]; then
        tue-install-git $source $repos_dir $version
    elif [ "$type" = "svn" ]; then
        tue-install-svn $source $repos_dir $version
    else
        tue-install-error "Unknown ros install type: '${type}'"
    fi

    if [ -d $repos_dir ]; then

        if [ ! -d $repos_dir/$sub_dir ]
        then
            tue-install-error "Subdirectory '$sub_dir' does not exist for URL '$source'."
        fi

        if [ ! -d $ros_pkg_dir ]
        then        
            # Create a symbolic link to the system workspace
            ln -s $repos_dir/$sub_dir $ros_pkg_dir
        fi
      
        if  [ -f $ros_pkg_dir/manifest.xml ]; then
            deps=`$TUE_INSTALL_SCRIPTS_DIR/parse-rosbuild-package-deps $ros_pkg_dir/manifest.xml`

            for dep in $deps
            do
                tue-install-target ros-$dep
            done

        else
            echo "WARNING: '$source' does not contain a valid ROS manifest.xml."
        fi        
        
    else
        tue-install-error "Checking out $source was not successful."
    fi

    TUE_INSTALL_PKG_DIR=$ros_pkg_dir
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

function tue-install-ros {
    type=$1
    source=$2
    sub_dir=$3
    version=$4

    local ros_pkg_name=${TUE_INSTALL_CURRENT_TARGET#ros-}

    # First of all, make sure ROS itself is installed
    tue-install-target ros    
    mkdir -p ~/.tue/installed
    touch ~/.tue/installed/ros

    if [ "$type" = "system" ]; then
        if [ -z "$TUE_ROS_DISTRO" ]; then
            tue-install-error "Environment variable ROS_DISTRO not set."
        fi

        TUE_INSTALL_SYSTEMS="ros-$TUE_ROS_DISTRO-$source $TUE_INSTALL_SYSTEMS"
        return
    fi

    if [ -z $ROS_PACKAGE_INSTALL_DIR ]; then
        tue-install-error "Environment variable ROS_PACKAGE_INSTALL_DIR not set."
    fi

    local ros_pkg_dir=$ROS_PACKAGE_INSTALL_DIR/$ros_pkg_name
    local repos_dir=$TUE_REPOS_DIR/$source
    #mkdir -p $repos_dir/..

    # For backwards compatibility: if the ros_pkg_dir already exists and is NOT
    # a symbolic link, then update this direcory instead of creating a symbolic
    # link from the repos directory. In other words, the ros_pkg_dir becomes the
    # repos_dir
    if [[ -d $ros_pkg_dir && ! -L $ros_pkg_dir ]]
    then
        repos_dir=$ros_pkg_dir
    fi

    if [ "$type" = "git" ]; then
        tue-install-git $source $repos_dir $version
    elif [ "$type" = "svn" ]; then
        tue-install-svn $source $repos_dir $version
    else
        tue-install-error "Unknown ros install type: '${type}'"
    fi

    if [ -d $repos_dir ]; then

        if [ ! -d $repos_dir/$sub_dir ]
        then
            tue-install-error "Subdirectory '$sub_dir' does not exist for URL '$source'."
        fi

        if [ ! -d $ros_pkg_dir ]
        then        
            # Create a symbolic link to the system workspace
            ln -s $repos_dir/$sub_dir $ros_pkg_dir
        fi
      
        if  [ -f $ros_pkg_dir/package.xml ]; then
            # Catkin

            deps=`$TUE_INSTALL_SCRIPTS_DIR/parse-ros-package-deps $ros_pkg_dir/package.xml`

            for dep in $deps
            do
                tue-install-target ros-$dep
            done

        else
            echo "WARNING: '$source' does not contain a valid ROS package.xml."
        fi        
        
    else
        tue-install-error "Checking out $source was not successful."
    fi

    TUE_INSTALL_PKG_DIR=$ros_pkg_dir
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

function generate_setup_file
{
    # Check whether this target was already added to the setup
    if [[ "$TUE_SETUP_TARGETS" == *" $1 "* ]];
    then
        return    
    fi

    # Check if the dependency file exists. If not, return
    if [ ! -f ~/.tue/dependencies/$1 ]
    then
        return
    fi

    # Recursively add a setup for each dependency
    deps=`cat ~/.tue/dependencies/$1`
    for dep in $deps
    do
        if [ -f ~/.tue/installer/targets/$dep/setup ]
        then
            generate_setup_file $dep
        fi
    done

    local tue_setup_file=~/.tue/installer/targets/$1/setup
    if [ -f $tue_setup_file ]
    then
        echo "source $tue_setup_file" >> ~/.tue/setup/target_setup.bash
    fi

    TUE_SETUP_TARGETS=" $1$TUE_SETUP_TARGETS"
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

# CATKIN PACKAGES
ROS_PACKAGE_INSTALL_DIR=$TUE_SYSTEM_DIR/src
mkdir -p $ROS_PACKAGE_INSTALL_DIR

# ROSBUILD PACKAGES
ROSBUILD_PACKAGE_INSTALL_DIR=~/ros/$TUE_ROS_DISTRO/rosbuild/trunk
mkdir -p $ROSBUILD_PACKAGE_INSTALL_DIR

TUE_INSTALL_TARGET_DIR=~/.tue/installer/targets
TUE_INSTALL_SCRIPTS_DIR=~/.tue/installer/scripts

TUE_INSTALL_STATE_DIR=/tmp/tue-installer/`randid`
mkdir -p $TUE_INSTALL_STATE_DIR

TUE_INSTALL_TEMP_DIR=/tmp/tue-installer/`randid`
mkdir -p $TUE_INSTALL_TEMP_DIR

TUE_INSTALL_SYSTEMS=

if [ -z $1 ]
then
    # If no targets are provided, update all installed targets
    targets=`ls ~/.tue/installed`    
else
    targets=$@
fi

for target in $targets
do
    tue-install-target $target
done

if [ -z "$TUE_INSTALL_DUMMY" ]; then
    if [ -n "$TUE_INSTALL_SYSTEMS" ]; then
        sudo apt-get install -y $TUE_INSTALL_SYSTEMS
    fi
fi

mkdir -p ~/.tue/installed
touch ~/.tue/installed/$1

# (Re-)generate setup file
echo "# This file was auto-generated by tue-install. Do not change this file." > ~/.tue/setup/target_setup.bash

mkdir -p ~/.tue/dependencies
installed_targets=`ls ~/.tue/dependencies`
TUE_SETUP_TARGETS=" "
for t in $installed_targets
do
    generate_setup_file $t
done

# Generate .rosinstall file (for Ramon)
~/.tue/installer/scripts/generate-rosinstall ~/ros/$TUE_ROS_DISTRO/system/src > ~/ros/$TUE_ROS_DISTRO/system/src/.rosinstall

