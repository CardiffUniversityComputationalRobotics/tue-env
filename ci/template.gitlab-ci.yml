# GitLab CI configuration to use SSH and docker registry
#
# Prerequisities:
# 1. Generate a password less SSH key on a local machine
# 2. Add the public key as a deploy key to the repository/group
# 3. Add the private key as a variable (e.g. SSH_KEY_PRIVATE) to the repository/group

image: docker:19.03.1

services:
  - docker:19.03.1-dind

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_DRIVER: overlay2
  SHARED_PATH: "/builds/shared/$CI_PROJECT_PATH"

before_script:
  - docker info
  - apk --update add git bash
  - which ssh-agent || ( apk --update add openssh-client )
  # To clone the tue-env repository and get the install-package.sh & build-package.sh scripts
  # SSH needs to be setup in the CI environment
  - eval $(ssh-agent -s)
  - echo "$CI_SSH_KEY_PRIVATE" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh "$SHARED_PATH"/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
  # The known_hosts file is merged in the tue-env docker container to make sure the correct
  # signature of the git server is setup and does not require input using CLI
  - cp ~/.ssh/known_hosts "$SHARED_PATH"/.ssh/
  - chmod 644 ~/.ssh/known_hosts
  - git clone --depth=1 --single-branch git@gitlab.com:avular/common-tools/package-manager/tue-env.git /tmp/tue-env
  - mv /tmp/tue-env/ci/install-package.sh /tmp/tue-env/ci/build-package.sh .
  # Authenticate the docker registry where the docker images stored
  - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin

Install, Build, Test:
  script:
    - ./install-package.sh --package=$CI_PROJECT_NAME --branch=${CI_MERGE_REQUEST_BRANCH_NAME:-${CI_COMMIT_BRANCH}} --commit=$CI_COMMIT_SHA --pullrequest=${CI_MERGE_REQUEST_ID:-"false"} --image="$CI_REGISTRY/avular/common-tools/package-manager/tue-env" --shared="$SHARED_PATH" --ssh --ssh-key="$CI_SSH_KEY_PRIVATE"
    - ./build-package.sh -p=$CI_PROJECT_NAME
  rules:
    - if: '$MIRROR_UPSTREAM == "true"'
      when: never

Mirror Upstream:
  script:
    - mv /tmp/tue-env/ci/mirror-upstream.bash .
    - ./mirror-upstream.bash --upstream-remote="$REMOTE_URL" --upstream-remote-branch="$REMOTE_BRANCH" --upstream-branch="$LOCAL_UPSTREAM_BRANCH"
  rules:
    - if: '$MIRROR_UPSTREAM == "true"'
