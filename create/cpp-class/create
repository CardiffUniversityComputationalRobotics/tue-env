#! /usr/bin/python

import re

def camel_case_to_underscore(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

class_name =   raw_input('Class name:   ')
project_name = raw_input('Project name: ')
namespaces =   raw_input('Namespace(s): ')
super_class =  raw_input('Super class:  ')

filename = camel_case_to_underscore(class_name)
header_guard = camel_case_to_underscore(project_name).upper() + "_" + filename.upper() + "_H_"

# Header file

with open(filename + ".h", "w") as f:
    f.write("#ifndef " + header_guard + "\n")
    f.write("#define " + header_guard + "\n")
    f.write("\n")

    if super_class:
        f.write("#include \"" + camel_case_to_underscore(super_class) + ".h\"\n\n")
    
    if namespaces:
        for ns in namespaces.split(" "):
            f.write("namespace " + ns + "\n{\n")
        f.write("\n")

    f.write("class " + class_name);

    if super_class:
        f.write(" : public " + super_class)

    f.write("\n{\n\n")

    f.write("public:\n\n")
    f.write("    " + class_name + "();\n\n")
    f.write("    " + "virtual ~" + class_name + "();\n\n")
    f.write("private:\n\n")
    f.write("};\n\n")

    if namespaces:
        for ns in namespaces.split(" "):
            f.write("} // end namespace " + ns + "\n\n")

    f.write("#endif\n")

# Source file
with open(filename + ".cpp", "w") as f:
    f.write("#include \"")
    if project_name:
        f.write(project_name + "/")
    f.write(class_name + ".h\"\n\n")

    if namespaces:
        for ns in namespaces.split(" "):
            f.write("namespace " + ns + "\n{\n")
        f.write("\n")

    f.write("// " + "-" * 100 + "\n\n")
    f.write(class_name + "::" + class_name + "()\n{\n}\n\n")

    f.write("// " + "-" * 100 + "\n\n")
    f.write(class_name + "::~" + class_name + "()\n{\n}\n\n")

    if namespaces:
        for ns in namespaces.split(" "):
            f.write("} // end namespace " + ns + "\n\n")
    
    
